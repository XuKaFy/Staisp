DEFFUNC i32:swap(i32*:x i32*:y) {
    DEFVAR i32:t DEREF x
    ASSIGN DEREF x DEREF y
    ASSIGN DEREF y t
    RETURN 0
}

DEFFUNC i32:minElement(i32[10]:a i32:size) {
    DEFVAR i32:i ADD size 1
    DEFVAR i32:ans size
    WHILE LE i 10 {
        IF LE DEREF ITEM a [i]
              DEREF ITEM a [ans] {
            ASSIGN ans i
        }
        ASSIGN i ADD i 1
    }
    RETURN ans
}

DEFFUNC i32:equal(i32[10]:a i32[10]:b) {
    DEFVAR i32:i 0
    WHILE LE i 10 {
        IF NE DEREF ITEM a [i] 
              DEREF ITEM b [i] {
            RETURN ADD i 1
        }
    }
    RETURN 0
}

DEFFUNC i32:main() {
    DEFVAR i32[10]:a [9 2 5 4 6 3 8 1 7 10]
    DEFVAR i32[10]:b [1 2 3 4 5 6 7 8 9 10]
    DEFVAR i32:pos 0
    DEFVAR i32:i 0
    WHILE LE i 10 {
        ASSIGN pos minElement(a 0)
        BREAK
        swap(ITEM a [i] ITEM a [pos])
        ASSIGN i ADD i 1
    }
    RETURN pos
    RETURN equal(a b)
}

